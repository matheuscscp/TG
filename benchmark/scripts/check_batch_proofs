#!/bin/bash

prover_res() {
  grep Theorem prover_$$.out > /dev/null 2> /dev/null
  if [ "$?" = "0" ]; then
    return 0
  else
    grep CounterSatisfiable prover_$$.out > /dev/null 2> /dev/null
    if [ "$?" = "0" ]; then
      return 1
    else
      grep bad_alloc prover_$$.out > /dev/null 2> /dev/null
      if [ "$?" = "0" ]; then
        return 2
      else
        return 3
      fi
    fi
  fi
}

if [ "$#" != "2" ]; then
  echo "Usage mode: $0 <batch name> <timeout>"
  exit
fi

for file in `ls -Sr proofs/$1/*`;
do
  fn=$(basename $file)
  
  # check if $file was already checked
  grep ",$fn" infos/$1.check > /dev/null 2> /dev/null
  if [ "$?" = "0" ]; then
    continue
  fi
  
  # check if batch exited normally
  grep ",$fn" infos/$1.info > check_proofs_$$.tmp 2> /dev/null
  if [ "$?" != "0" ]; then
    echo "$0: $fn do not occurs inside infos/$1.info"
    exit
  fi
  
  # check if batch exceeded time limit
  grep ",timeout," check_proofs_$$.tmp > /dev/null 2> /dev/null
  if [ "$?" = "0" ]; then
    echo ",$fn,timeout," >> infos/$1.check
    continue
  fi
  
  # check if batch exceeded memory limit
  grep ",memout," check_proofs_$$.tmp > /dev/null 2> /dev/null
  if [ "$?" = "0" ]; then
    echo ",$fn,memout," >> infos/$1.check
    continue
  fi
  
  # check file size
  fsize=$(stat -c%s "$file")
  if [ "$fsize" = "23" ]; then
    echo ",$fn,empty," >> infos/$1.check
    continue
  fi
  
  # run prover for supposed theorem $file
  timeout $2 eprover -s --auto --tptp3-format $file > prover_$$.out 2> prover_$$.out
  if [ "$?" = "124" ]; then
    echo ",$fn,timeout," >> infos/$1.check
    continue
  fi
  
  # check result
  prover_res
  case "$?" in
    "0")  echo ",$fn,ok," >> infos/$1.check
          ;;
    "1")  echo ",$fn,fail," >> infos/$1.check
          ;;
    "2")  echo ",$fn,memout," >> infos/$1.check
          ;;
    *)    echo "$0: error checking $file"
          exit
          ;;
  esac
done

rm -rf prover_$$.out check_proofs_$$.tmp

